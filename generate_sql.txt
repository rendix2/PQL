private function generateWhere()
    {
        $where   = '';

        if (count($this->whereCondition)) {
            $where = 'WHERE ';

            foreach ($this->whereCondition as $condition) {
                $where .= sprintf('%s %s %s ', $condition['column'], $condition['operator'], $condition['value']);
            }
        }

        return $where;
    }

    private function generateGroupBy()
    {
        $groupBy = '';

        if (count($this->groupBy)) {
            $groupBy = 'GROUP BY ';

            foreach ($this->groupBy as $value) {
                $groupBy .= $value;
            }
        }

        return $groupBy;
    }

    private function generateOrderBy()
    {
        $orderBy = '';

        if (count($this->orderBy)) {
            $orderBy = 'ORDER BY ';

            foreach ($this->orderBy as $values) {
                $type = $values['asc'] ? 'ASC' : 'DESC';

                $orderBy .= sprintf('%s %s', $values['column'], $type);
            }
        }

        return $orderBy;
    }

    /**
     * @return string
     */
    private function generateLimit()
    {
        $limit = '';

        if ($this->limit) {
            $limit = 'LIMIT ' . $this->limit;
        }

        return $limit;
    }

    /**
     * @return string
     */
    private function build()
    {
        if ($this->isSelect) {
            $select = sprintf('SELECT %s FROM %s ', implode(', ', $this->columns), $this->table->getName());

            $where   = $this->generateWhere();
            $orderBy = $this->generateOrderBy();
            $groupBy = $this->generateGroupBy();
            $limit   = $this->generateLimit();

            return sprintf('%s %s %s %s %s', $select, $where, $groupBy, $orderBy, $limit);
        }

        if ($this->isDelete) {
            $where   = $this->generateWhere();
            $limit   = $this->generateLimit();

            return sprintf('DELETE FROM %s %s %s', $this->table->getName(), $where, $limit);
        }

        if ($this->isUpdate) {
            $where   = $this->generateWhere();
            $limit   = $this->generateLimit();
            $set     = '';

            if ($this->updateData) {
                $set = 'SET ';

                foreach ($this->updateData as $column => $value) {
                    $set .= sprintf('%s = %s', $column, $value);
                }
            }

            return sprintf('UPDATE %s %s %s %s', $this->table->getName(), $set, $where, $limit);
        }

        if ($this->isInsert) {
            $columns = array_keys($this->insertData);
            $values  = array_values($this->insertData);

            return sprintf(
                'INSERT INTO %s (%s) VALUES (%s)',
                $this->table->getName(),
                implode(', ', $columns),
                implode(', ', $values)
            );
        }
    }

    public function show()
    {
        echo sprintf('I have built this query: %s', $this->build());
    }
